(()=>{"use strict";class e{createToDoForm=e=>{const t=this.createForm(),r=this.createLabels(["*Title:","*Description:","*Due Date:","*Priority:"]),o=this.createToDoInputs(["todo-title","todo-description"]);let n=this.joinLists(this.appendInputsToLabels(r,o),this.appendButtons(e,"to-do"));return this.appendElementsToForm(t,n)};createForm(){let e=document.createElement("form");return this.assignAttribute(e,"method","post"),e}assignAttribute(e,t,r=""){e.setAttribute(t,r)}createLabels(e){let t=[];for(const r of e)t.push(this.createLabel(r));return t}createLabel(e){const t=document.createElement("label");return t.textContent=e,t}createToDoInputs(e){const t=this.createTextInputs(e),r=this.createDistinctInputs();return this.joinLists(t,r)}createTextInputs(e){let t=[];for(const r of e)t.push(this.createInput(r));return t}createInput(e,t=""){const r=document.createElement("input");let o=["name","required"],n=[e,""];return t&&(o.push("type"),n.push(t)),this.assignAttributes(r,o,n),r}assignAttributes(e,t,r){for(let o=0;o<t.length;o++)this.assignAttribute(e,t[o],r[o])}createDistinctInputs(){return[this.createDatetimeLocalInput("todo-dueDate"),this.createNumberInput("todo-priority")]}createDatetimeLocalInput(e){const t=this.createInput(e,"datetime-local");return this.assignAttribute(t,"value",this.getCurrentDate()),t}getCurrentDate(){return(new Date).toJSON().slice(0,19)}createNumberInput(e){const t=this.createInput(e,"number");return this.assignAttributes(t,["min","max","placeholder"],["1","3","1"]),t}appendInputsToLabels(e,t){let r=this.deepCloneNodes(e);const o=this.deepCloneNodes(t);for(let t=0;t<e.length;t++)r[t].appendChild(o[t]);return r}joinLists(e,t){return e.concat(t)}deepCloneNodes(e){let t=[];for(const r of e)t.push(r.cloneNode(!0));return t}appendButtons(e,t){return[e,this.createSubmitButton(t)]}createSubmitButton(e){const t=document.createElement("input");let r=["submit",`Create ${e}`];return this.assignAttributes(t,["type","value"],r),t}appendElementsToForm(e,t){const r=this.deepCloneNodes(t);for(const t of r)e.appendChild(t);return e}createProjectForm=e=>{const t=this.createForm(),r=this.createLabels(["*Name:"]),o=this.createTextInputs(["project-name"]);let n=this.joinLists(this.appendInputsToLabels(r,o),this.appendButtons(e,"project"));return this.appendElementsToForm(t,n)}}class t{constructor(t=e){this.script=document.querySelector("script"),this.formCreator=new t}loadPage(){this.createHeader(),this.createSidebar(),this.createMain(),this.createFooter()}createHeader(){let e=document.createElement("header"),t=document.createElement("nav"),r=this.createNavbar();e.appendChild(t),t.appendChild(r),this.script.parentNode.insertBefore(e,this.script)}createNavbar(){let e=this.createUl("navbar"),t=[this.createButton("New to-do",{className:"new-to-do"}),this.createButton("New project",{className:"new-project"})];return this.appendListElements(e,t),e}createUl(e=""){const t=document.createElement("ul");return e&&t.classList.add(e),t}appendListElements(e,t){for(let r of t)e.appendChild(r)}loadForm=e=>{if(null===document.querySelector("form")){let t=document.querySelector("main");const r=e(this.createButton("Cancel",{type:"button"}));t.appendChild(r)}};createButton(e,t){let r=document.createElement("button");return r.textContent=e,t.type&&r.setAttribute("type",t.type),t.className&&r.classList.add(t.className),r}removeForm(){document.querySelector("form").remove()}addProjectToSidebar(e){let t=document.querySelector(".projects-list");const r=this.createHeading(e,"h2");t.appendChild(this.createLi(r))}createLi(e){let t=document.createElement("li");return t.appendChild(e),t}createSidebar(){let e=document.createElement("nav"),t=[this.createHeading("Projects","h1"),this.createProjectsList()];this.appendListElements(e,t),this.script.parentNode.insertBefore(e,this.script)}createHeading(e,t){let r=document.createElement(t);return r.textContent=e,r}createProjectsList(){let e=this.createUl("projects-list");const t=this.createHeading("default","h2");return e.appendChild(this.createLi(t)),e}createMain(){const e=document.createElement("main");let t=this.createDiv("content");const r=this.createProjectContainer("default-container");t.appendChild(r),e.appendChild(t),this.script.parentNode.insertBefore(e,this.script)}createProjectContainer(e){let t=this.createDiv(e),r=this.createUl("todo-list");return t.appendChild(r),t}createDiv(e){let t=document.createElement("div");return t.classList.add(e),t}createFooter(){const e=document.createElement("footer");this.script.parentNode.insertBefore(e,this.script)}loadProject(e){this.replaceProjectContainer(`${e}-container`),this.addProjectToSidebar(e),this.removeForm()}removeProjectContainer(){document.querySelector(".content > div").remove()}replaceProjectContainer(e){let t=document.querySelector(".content"),r=this.createProjectContainer(e);this.removeProjectContainer(),t.appendChild(r)}getCurrentProjectName(){return document.querySelector(".content > div").className.split("-")[0]}}class r{addNavbarListener(e,t){document.querySelector(".navbar").addEventListener("click",(r=>this.handleNavbarButtons(r,e,t)))}handleNavbarButtons=(e,t,r)=>{let o=this.getAttributeFrom(e.target,"className"),n=this.getFormFunction(t.formCreator,o);"new-to-do"===o&&(t.loadForm(n),this.addFormListener(this.validateToDoForm,t)),"new-project"===o&&(t.loadForm(n),this.addFormListener(r[0],t))};getAttributeFrom(e,t){return e[t]}getFormFunction(e,t){return"new-to-do"===t?e.createToDoForm:"new-project"===t?e.createProjectForm:void 0}addFormListener(e,t){document.querySelector("form").addEventListener("click",(r=>this.handleFormButtons(r,e,t)))}handleFormButtons=(e,t,r)=>{let o=this.getAttributeFrom(e.target,"type");"button"===o&&r.removeForm(),"submit"===o&&t(e,r)};validateToDoForm=(e,t)=>{this.gatherToDoFormData(e).includes("")?console.log("Couldn't create To-do"):t.removeForm()};gatherToDoFormData=e=>(e.preventDefault(),[this.getAttributeFrom(document.querySelector("[name='todo-title']"),"value"),this.getAttributeFrom(document.querySelector("[name='todo-description']"),"value"),this.getAttributeFrom(document.querySelector("[name='todo-dueDate']"),"value"),this.getAttributeFrom(document.querySelector("[name='todo-priority']"),"value")])}class o{constructor(e){this.name=e,this.todos=[]}addTodo(e){this.todos.push(e)}get name(){return this._name}set name(e){this._name=e}get todos(){return this._todos}set todos(e){this._todos=e}removeTodo(){}}class n{constructor(e=o){this.projectList=[],this.addProject(new e("default"))}addProject(e){this.projectList.push(e)}validateProjectForm=(e,t,r=o)=>{const n=this.gatherProjectFormData(e);if(""===n)return void console.log("Couldn't create Project");const s=n.toLowerCase();let a=new r(s);this.addProject(a),t.loadProject(s)};gatherProjectFormData(e){return e.preventDefault(),document.querySelector("[name='project-name']").value}projectNameCoincides(e,t){return e.name===t}searchProject(e){return this.projectList.find((t=>this.projectNameCoincides(t,e)))}get projectList(){return this._projectList}set projectList(e){this._projectList=e}}(new class{constructor(){this.myDOMCreator=new t,this.myEventListenerAgregator=new r,this.myProjectManager=new n}loadPage(){this.myDOMCreator.loadPage(),this.myEventListenerAgregator.addNavbarListener(this.myDOMCreator,[this.myProjectManager.validateProjectForm])}}).loadPage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,