(()=>{"use strict";class t{createToDoForm=t=>{const e=this.createForm(),r=this.createLabels(["*Title:","*Description:","*Due Date:","*Priority:"]),o=this.createToDoInputs(["todo-title","todo-description"]);let s=this.joinLists(this.appendInputsToLabels(r,o),this.appendButtons(t,"to-do"));return this.appendElementsToForm(e,s)};createForm(){let t=document.createElement("form");return this.assignAttribute(t,"method","post"),t}assignAttribute(t,e,r=""){t.setAttribute(e,r)}createLabels(t){let e=[];for(const r of t)e.push(this.createLabel(r));return e}createLabel(t){const e=document.createElement("label");return e.textContent=t,e}createToDoInputs(t){const e=this.createTextInputs(t),r=this.createDistinctInputs();return this.joinLists(e,r)}createTextInputs(t){let e=[];for(const r of t)e.push(this.createInput(r));return e}createInput(t,e=""){const r=document.createElement("input");let o=["name","required"],s=[t,""];return e&&(o.push("type"),s.push(e)),this.assignAttributes(r,o,s),r}assignAttributes(t,e,r){for(let o=0;o<e.length;o++)this.assignAttribute(t,e[o],r[o])}createDistinctInputs(){return[this.createDatetimeLocalInput("todo-dueDate"),this.createNumberInput("todo-priority")]}createDatetimeLocalInput(t){const e=this.createInput(t,"datetime-local");return this.assignAttribute(e,"value",this.getCurrentDate()),e}getCurrentDate(){return(new Date).toJSON().slice(0,19)}createNumberInput(t){const e=this.createInput(t,"number");return this.assignAttributes(e,["min","max","placeholder"],["1","3","1"]),e}appendInputsToLabels(t,e){let r=this.deepCloneNodes(t);const o=this.deepCloneNodes(e);for(let e=0;e<t.length;e++)r[e].appendChild(o[e]);return r}joinLists(t,e){return t.concat(e)}deepCloneNodes(t){let e=[];for(const r of t)e.push(r.cloneNode(!0));return e}appendButtons(t,e){return[t,this.createSubmitButton(e)]}createSubmitButton(t){const e=document.createElement("input");let r=["submit",`Create ${t}`];return this.assignAttributes(e,["type","value"],r),e}appendElementsToForm(t,e){const r=this.deepCloneNodes(e);for(const e of r)t.appendChild(e);return t}createProjectForm=t=>{const e=this.createForm(),r=this.createLabels(["*Name:"]),o=this.createTextInputs(["project-name"]);let s=this.joinLists(this.appendInputsToLabels(r,o),this.appendButtons(t,"project"));return this.appendElementsToForm(e,s)}}class e{constructor(e=t){this.script=document.querySelector("script"),this.formCreator=new e}get script(){return this._script}set script(t){this._script=t}get formCreator(){return this._formCreator}set formCreator(t){this._formCreator=t}loadPage(){this.createHeader(),this.createSidebar(),this.createMain(),this.createFooter()}createHeader(){let t=document.createElement("header"),e=document.createElement("nav"),r=this.createNavbar();t.appendChild(e),e.appendChild(r),this.script.parentNode.insertBefore(t,this.script)}createNavbar(){let t=this.createUl("navbar"),e=[this.createButton("New to-do",{className:"new-to-do"}),this.createButton("New project",{className:"new-project"})];return this.appendListElements(t,e),t}createUl(t=""){const e=document.createElement("ul");return t&&e.classList.add(t),e}appendListElements(t,e){for(let r of e)t.appendChild(r)}loadForm=t=>{if(null===this.getElement("form")){let e=this.getElement("main");const r=t(this.createButton("Cancel",{type:"button"}));e.appendChild(r)}};getElement(t){return document.querySelector(t)}createButton(t,e={}){let r=document.createElement("button");return r.textContent=t,e.type&&r.setAttribute("type",e.type),e.className&&r.classList.add(e.className),r}removeForm(){const t=this.getElement("form");this.removeElement(t)}removeElement(t){t.remove()}addProjectToSidebar(t){let e=this.getElement(".projects-list");const r=this.createButton(t,{className:"project-button"});e.appendChild(this.createLi(r))}createHeading(t,e){let r=document.createElement(e);return r.textContent=t,r}createLi(t){let e=document.createElement("li");return e.appendChild(t),e}createSidebar(){let t=document.createElement("nav"),e=[this.createHeading("Projects","h1"),this.createProjectsList()];this.appendListElements(t,e),this.script.parentNode.insertBefore(t,this.script)}createProjectsList(){let t=this.createUl("projects-list"),e=this.createButton("default",{className:"project-button"});return t.appendChild(this.createLi(e)),t}createMain(){const t=document.createElement("main");let e=this.createDiv("content");const r=this.createProjectContainer("default-container");e.appendChild(r),t.appendChild(e),this.script.parentNode.insertBefore(t,this.script)}createProjectContainer(t,e={}){let r=t.replace("-container",""),o=this.createDiv(t),s=this.createHeading(r,"h1"),i=this.loadTodos(r,e);return this.appendListElements(o,[s,i]),o}createDiv(t){let e=document.createElement("div");return e.classList.add(t),e}loadTodos(t,e){let r=this.createUl("todo-list");if(e.pm){let o=e.pm.searchProject(t),s=this.createTodos(o.todos);this.appendListElements(r,s)}return r}createTodos(t){let e=[];for(let r of t)e.push(this.createTodo(r.title,r.description));return e}createFooter(){const t=document.createElement("footer");this.script.parentNode.insertBefore(t,this.script)}loadProject(t){this.replaceProjectContainer(`${t}-container`),this.addProjectToSidebar(t),this.removeForm()}removeProjectContainer(){const t=this.getCurrentProjectContainer();this.removeElement(t)}getCurrentProjectContainer(){return this.getElement(".content > div")}replaceProjectContainer(t,e={}){let r=this.getElement(".content"),o=this.createProjectContainer(t,e);this.removeProjectContainer(),r.appendChild(o)}getCurrentProjectName(){return this.getCurrentProjectContainer().className.split("-")[0]}createTodo(t,e){let r=this.createButton("Mark complete"),o=this.createButton("Delete",{className:"delete"}),s=this.createParagraph(`Title: ${t}, Description: ${e}`),i=this.createLi(r);return this.appendListElements(i,[o,s]),i}createParagraph(t){let e=document.createElement("p");return e.textContent=t,e}loadTodo(t){this.getElement(".todo-list").appendChild(t)}obtainTodoTitle(t){let e=t.querySelector("p").textContent.split(",");return e=e[0].split(": "),e[1]}updateTodo(t,e){let r=this.createParagraph(`Due date: ${e.dueDate}, priority: ${e.priority}`);t.appendChild(r)}getAttributeFrom(t,e){return t[e]}}class r{addNavbarListener(t,e){e.dco.getElement(".navbar").addEventListener("click",(r=>t(r,e)))}addFormListener(t,e){e.dco.getElement("form").addEventListener("click",(r=>e.handleFunction(r,t,e)))}addElementListener(t,e){t.addEventListener("click",(t=>e(t)))}}class o{constructor(t){this.name=t,this.todos=[]}addTodo(t){this.todos.push(t)}get name(){return this._name}set name(t){this._name=t}get todos(){return this._todos}set todos(t){this._todos=t}searchTodo(t){return this.todos.find((e=>e.title===t))}removeTodo(t){let e=this.getTodoIndex(t);this.todos=this.todos.slice(0,e).concat(this.todos.slice(e+1))}getTodoIndex(t){return this.todos.findIndex((e=>JSON.stringify(e)===JSON.stringify(t)))}}class s{constructor(t=o){this.projectList=[],this.addProject(new t("default"))}handleProjectCreation=(t,e)=>{t.preventDefault();const r=this.gatherProjectFormData(e.dco);this.validateProjectForm(r)?this.displayErrorModal():this.createProject(r,e)};gatherProjectFormData(t){return t.getElement("[name='project-name']").value}validateProjectForm=t=>""===t;displayErrorModal(){console.log("Couldn't create Project")}createProject(t,e,r=o){const s=t.toLowerCase();let i=new r(s);this.addProject(i),e.dco.loadProject(s),e.listenerFunction()}addProject(t){this.projectList.push(t)}searchProject(t){return this.projectList.find((e=>this.projectNameCoincides(e,t)))}projectNameCoincides(t,e){return t.name===e}get projectList(){return this._projectList}set projectList(t){this._projectList=t}}class i{constructor(t){this.title=t.title,this.description=t.description,this.dueDate=t.dueDate,this.priority=t.priority}}class n{validateTodoForm=(t,e)=>{let r=this.gatherTodoFormData(t,e.dco);this.validateFormData(r)?console.log("Couldn't create To-do"):this.addTodoToProject(r,e)};gatherTodoFormData=(t,e)=>(t.preventDefault(),{title:e.getElement("[name='todo-title']").value,description:e.getElement("[name='todo-description']").value,dueDate:e.getElement("[name='todo-dueDate']").value,priority:e.getElement("[name='todo-priority']").value});validateFormData(t){return Object.values(t).some((t=>""===t))}addTodoToProject(t,e){let r=e.pm,o=e.dco,s=this.createTodo(t),i=o.getCurrentProjectName();r.searchProject(i).addTodo(s),o.loadTodo(o.createTodo(s.title,s.description)),o.removeForm()}createTodo(t){return new i({title:t.title,description:t.description,dueDate:t.dueDate,priority:t.priority})}}(new class{constructor(){this.myDCO=new e,this.myELA=new r,this.myPM=new s,this.myTM=new n}loadPage(){this.createFC(),this.myDCO.loadPage(),this.myELA.addNavbarListener(this.handleNavbarButtons,this.getNavBarArguments()),this.myELA.addElementListener(this.myDCO.getElement(".projects-list"),this.handleProjectButtons),this.addTodoListListener()}createFC(){this.myFC=this.myDCO.formCreator}handleNavbarButtons=(t,e)=>{let r=this.myDCO.getAttributeFrom(t.target,"className"),o=this.selectFormFunctions(r,e.validateFunctions);this.myDCO.loadForm(o.formFunction),this.myELA.addFormListener(o.validateFunction,e)};selectFormFunctions(t,e){switch(t){case"new-to-do":return{validateFunction:e[0],formFunction:this.myFC.createToDoForm};case"new-project":return{validateFunction:e[1],formFunction:this.myFC.createProjectForm}}}getNavBarArguments(){return{dco:this.myDCO,pm:this.myPM,validateFunctions:this.getValidateFunctions(),handleFunction:this.handleFormButtons,listenerFunction:this.addTodoListListener}}getValidateFunctions(){return[this.myTM.validateTodoForm,this.myPM.handleProjectCreation]}handleFormButtons=(t,e,r)=>{let o=this.myDCO.getAttributeFrom(t.target,"type");"button"===o&&this.myDCO.removeForm(),"submit"===o&&e(t,r)};addTodoListListener=()=>{this.myELA.addElementListener(this.myDCO.getElement(".todo-list"),this.handleTodosLi)};handleTodosLi=t=>{let e=this.myDCO.getAttributeFrom(t.target,"nodeName"),r=this.getProjectObject();"BUTTON"!==e?this.handleTodo(t.target,r):"delete"===t.target.className&&this.removeTodo(t.target.parentElement,r)};getProjectObject(){let t=this.myDCO.getCurrentProjectName();return this.myPM.searchProject(t)}handleTodo(t,e){let r=this.getTodoObject(t,e),o=t.children.length;3==o?this.expandTodo(t,r):o>3&&this.collapseTodo(t)}getTodoObject(t,e){let r=this.myDCO.obtainTodoTitle(t);return e.searchTodo(r)}expandTodo(t,e){let r={dueDate:e.dueDate,priority:e.priority};this.myDCO.updateTodo(t,r)}collapseTodo(t){let e=t.lastChild;this.myDCO.removeElement(e)}removeTodo(t,e){let r=this.getTodoObject(t,e);e.removeTodo(r),this.myDCO.removeElement(t)}handleProjectButtons=t=>{if("project-button"===this.myDCO.getAttributeFrom(t.target,"className")){let e=this.myDCO.getAttributeFrom(t.target,"innerText");this.myDCO.replaceProjectContainer(e,{pm:this.myPM}),this.addTodoListListener()}}}).loadPage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,