(()=>{"use strict";class e{createToDoForm(e){const t=this.createLabels(),r=this.createInputs(),n=this.appendInputs(t,r);return n.push(e),this.appendFormElements(n)}createLabels(){const e=["*Title:","*Description:","*Due Date:","*Priority:"];let t=[];for(const r of e)t.push(this.createLabel(r));return t}createLabel(e){const t=document.createElement("label");return t.textContent=e,t}createInputs(){const e=this.createTextInputs(),t=this.createDistinctInputs();return e.concat(t)}createTextInputs(){let e=[];const t=["todo-title","todo-description"];for(const r of t)e.push(this.createInput(r));return e}createDistinctInputs(){return[this.createDatetimeLocalInput("todo-dueDate"),this.createNumberInput("todo-priority")]}createInput(e,t=""){const r=document.createElement("input");return r.setAttribute("name",e),r.setAttribute("required",""),t&&r.setAttribute("type",t),r}createNumberInput(e){const t=this.createInput(e,"number");return t.setAttribute("min","1"),t.setAttribute("max","3"),t.setAttribute("placeholder","1"),t}createDatetimeLocalInput(e){const t=this.createInput(e,"datetime-local");return t.setAttribute("value",this.getCurrentDate()),t}getCurrentDate(){return(new Date).toJSON().slice(0,19)}appendInputs(e,t){let r=this.deepCloneNodes(e);const n=this.deepCloneNodes(t);for(let t=0;t<e.length;t++)r[t].appendChild(n[t]);return r}deepCloneNodes(e){let t=[];for(const r of e)t.push(r.cloneNode(!0));return t}appendFormElements(e){const t=document.createElement("form"),r=this.deepCloneNodes(e),n=this.createSubmitButton("Create to-do");t.setAttribute("method","post"),r.push(n);for(const e of r)t.appendChild(e);return t.addEventListener("click",this.handleButtons),t}createSubmitButton(e){const t=document.createElement("input");return t.setAttribute("type","submit"),t.setAttribute("value",e),t}handleButtons=e=>{"button"===e.target.type&&this.removeForm(),"submit"===e.target.type&&this.gatherFormData(e)};removeForm(){document.querySelector("form").remove()}gatherFormData(e){e.preventDefault(),document.querySelector("[name='todo-title']").value,document.querySelector("[name='todo-description']").value,document.querySelector("[name='todo-dueDate']").value,document.querySelector("[name='todo-priority']").value}}(new class{script=document.querySelector("script");formCreator=new e;loadPage(){this.createHeader(),this.createMain(),this.createFooter()}createHeader(){let e=document.createElement("header"),t=document.createElement("nav"),r=this.createNavbar();e.appendChild(t),t.appendChild(r),this.script.parentNode.insertBefore(e,this.script)}createNavbar(){let e=this.createUl(),t=this.createButton("New to-do");return t.addEventListener("click",this.loadForm),e.appendChild(this.createLi(t)),e}createUl(){return document.createElement("ul")}loadForm=()=>{if(null===document.querySelector("form")){let e=document.querySelector("main");const t=this.createButton("Cancel","button"),r=this.formCreator.createToDoForm(t);e.appendChild(r)}};createLi(e){let t=document.createElement("li");return t.appendChild(e),t}createButton(e,t=""){let r=document.createElement("button");return r.textContent=e,"button"===t&&r.setAttribute("type",t),r}removeForm=()=>{document.querySelector("form").remove()};createSidebar(){let e=document.createElement("nav");const t=this.createH1("Projects"),r=this.createH2("Default");e.appendChild(t),e.appendChild(r),this.script.parentNode.insertBefore(e,this.script)}createH1(e){let t=document.createElement("h1");return t.textContent=e,t}createH2(e){let t=document.createElement("h2");return t.textContent=e,t}createMain(){const e=document.createElement("main");this.script.parentNode.insertBefore(e,this.script)}createFooter(){const e=document.createElement("footer");this.script.parentNode.insertBefore(e,this.script)}}).loadPage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,