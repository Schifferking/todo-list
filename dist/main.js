(()=>{"use strict";class t{createToDoForm=t=>{const e=this.createForm(),r=this.createLabels(["*Title:","*Description:","*Due Date:","*Priority:"]),o=this.createToDoInputs(["todo-title","todo-description"]);let n=this.joinLists(this.appendInputsToLabels(r,o),this.appendButtons(t,"to-do"));return this.appendElementsToForm(e,n)};createForm(){let t=document.createElement("form");return this.assignAttribute(t,"method","post"),t}assignAttribute(t,e,r=""){t.setAttribute(e,r)}createLabels(t){let e=[];for(const r of t)e.push(this.createLabel(r));return e}createLabel(t){const e=document.createElement("label");return e.textContent=t,e}createToDoInputs(t){const e=this.createTextInputs(t),r=this.createDistinctInputs();return this.joinLists(e,r)}createTextInputs(t){let e=[];for(const r of t)e.push(this.createInput(r));return e}createInput(t,e=""){const r=document.createElement("input");let o=["name","required"],n=[t,""];return e&&(o.push("type"),n.push(e)),this.assignAttributes(r,o,n),r}assignAttributes(t,e,r){for(let o=0;o<e.length;o++)this.assignAttribute(t,e[o],r[o])}createDistinctInputs(){return[this.createDatetimeLocalInput("todo-dueDate"),this.createNumberInput("todo-priority")]}createDatetimeLocalInput(t){const e=this.createInput(t,"datetime-local");return this.assignAttribute(e,"value",this.getCurrentDate()),e}getCurrentDate(){return(new Date).toJSON().slice(0,19)}createNumberInput(t){const e=this.createInput(t,"number");return this.assignAttributes(e,["min","max","placeholder"],["1","3","1"]),e}appendInputsToLabels(t,e){let r=this.deepCloneNodes(t);const o=this.deepCloneNodes(e);for(let e=0;e<t.length;e++)r[e].appendChild(o[e]);return r}joinLists(t,e){return t.concat(e)}deepCloneNodes(t){let e=[];for(const r of t)e.push(r.cloneNode(!0));return e}appendButtons(t,e){return[t,this.createSubmitButton(e)]}createSubmitButton(t){const e=document.createElement("input");let r=["submit",`Create ${t}`];return this.assignAttributes(e,["type","value"],r),e}appendElementsToForm(t,e){const r=this.deepCloneNodes(e);for(const e of r)t.appendChild(e);return t}createProjectForm=t=>{const e=this.createForm(),r=this.createLabels(["*Name:"]),o=this.createTextInputs(["project-name"]);let n=this.joinLists(this.appendInputsToLabels(r,o),this.appendButtons(t,"project"));return this.appendElementsToForm(e,n)}}class e{constructor(e=t){this.script=document.querySelector("script"),this.formCreator=new e}loadPage(){this.createHeader(),this.createSidebar(),this.createMain(),this.createFooter()}createHeader(){let t=document.createElement("header"),e=document.createElement("nav"),r=this.createNavbar();t.appendChild(e),e.appendChild(r),this.script.parentNode.insertBefore(t,this.script)}createNavbar(){let t=this.createUl("navbar"),e=[this.createButton("New to-do",{className:"new-to-do"}),this.createButton("New project",{className:"new-project"})];return this.appendListElements(t,e),t}createUl(t=""){const e=document.createElement("ul");return t&&e.classList.add(t),e}appendListElements(t,e){for(let r of e)t.appendChild(r)}loadForm=t=>{if(null===document.querySelector("form")){let e=document.querySelector("main");const r=t(this.createButton("Cancel",{type:"button"}));e.appendChild(r)}};createButton(t,e={}){let r=document.createElement("button");return r.textContent=t,e.type&&r.setAttribute("type",e.type),e.className&&r.classList.add(e.className),r}removeForm(){document.querySelector("form").remove()}addProjectToSidebar(t){let e=document.querySelector(".projects-list");const r=this.createButton(t,{className:"project-button"});e.appendChild(this.createLi(r))}createHeading(t,e){let r=document.createElement(e);return r.textContent=t,r}createLi(t){let e=document.createElement("li");return e.appendChild(t),e}createSidebar(){let t=document.createElement("nav"),e=[this.createHeading("Projects","h1"),this.createProjectsList()];this.appendListElements(t,e),this.script.parentNode.insertBefore(t,this.script)}createProjectsList(){let t=this.createUl("projects-list"),e=this.createButton("default",{className:"project-button"});return t.appendChild(this.createLi(e)),t}createMain(){const t=document.createElement("main");let e=this.createDiv("content");const r=this.createProjectContainer("default-container");e.appendChild(r),t.appendChild(e),this.script.parentNode.insertBefore(t,this.script)}createProjectContainer(t,e={}){let r=t.replace("-container",""),o=this.createDiv(t),n=this.createHeading(r,"h1"),s=this.loadTodos(r,e);return this.appendListElements(o,[n,s]),o}createDiv(t){let e=document.createElement("div");return e.classList.add(t),e}loadTodos(t,e){let r=this.createUl("todo-list");if(e.pm){let o=e.pm.searchProject(t),n=this.createTodos(o.todos);this.appendListElements(r,n)}return r}createTodos(t){let e=[];for(let r of t)e.push(this.createTodo(r.title,r.description));return e}createFooter(){const t=document.createElement("footer");this.script.parentNode.insertBefore(t,this.script)}loadProject(t){this.replaceProjectContainer(`${t}-container`),this.addProjectToSidebar(t),this.removeForm()}removeProjectContainer(){this.getCurrentProjectContainer().remove()}getCurrentProjectContainer(){return document.querySelector(".content > div")}replaceProjectContainer(t,e={}){let r=document.querySelector(".content"),o=this.createProjectContainer(t,e);this.removeProjectContainer(),r.appendChild(o)}getTodoList(){return document.querySelector(".todo-list")}getCurrentProjectName(){return this.getCurrentProjectContainer().className.split("-")[0]}createTodo(t,e){let r=this.createButton(""),o=this.createParagraph(`Title: ${t}, Description: ${e}`),n=this.createLi(r);return n.appendChild(o),n}createParagraph(t){let e=document.createElement("p");return e.textContent=t,e}loadTodo(t){this.getTodoList().appendChild(t)}}class r{addNavbarListener(t){document.querySelector(".navbar").addEventListener("click",(e=>this.handleNavbarButtons(e,t)))}handleNavbarButtons=(t,e)=>{let r=this.obtainDCO(e),o=e.validateFunctions,n=this.getAttributeFrom(t.target,"className"),s=this.getFormFunction(this.getFormCreator(r),n);"new-to-do"===n&&(r.loadForm(s),this.addFormListener(o[0],e)),"new-project"===n&&(r.loadForm(s),this.addFormListener(o[1],e))};obtainDCO(t){return t.dco}getAttributeFrom(t,e){return t[e]}getFormFunction(t,e){return"new-to-do"===e?t.createToDoForm:"new-project"===e?t.createProjectForm:void 0}getFormCreator(t){return t.formCreator}addFormListener(t,e){document.querySelector("form").addEventListener("click",(r=>this.handleFormButtons(r,t,e)))}handleFormButtons=(t,e,r)=>{let o=this.obtainDCO(r),n=this.getAttributeFrom(t.target,"type");"button"===n&&o.removeForm(),"submit"===n&&e(t,r)};addProjectsListListener(t={}){document.querySelector(".projects-list").addEventListener("click",(e=>this.handleProjectButtons(e,t)))}handleProjectButtons(t,e){if("project-button"===this.getAttributeFrom(t.target,"className")){let r=this.getAttributeFrom(t.target,"innerText");e.dco.replaceProjectContainer(r,{pm:e.pm})}}}class o{constructor(t){this.name=t,this.todos=[]}addTodo(t){this.todos.push(t)}get name(){return this._name}set name(t){this._name=t}get todos(){return this._todos}set todos(t){this._todos=t}removeTodo(){}}class n{constructor(t=o){this.projectList=[],this.addProject(new t("default"))}addProject(t){this.projectList.push(t)}validateProjectForm=(t,e,r=o)=>{let n=e.dco;const s=this.gatherProjectFormData(t);if(""===s)return void console.log("Couldn't create Project");const a=s.toLowerCase();let i=new r(a);this.addProject(i),n.loadProject(a)};gatherProjectFormData(t){return t.preventDefault(),document.querySelector("[name='project-name']").value}projectNameCoincides(t,e){return t.name===e}searchProject(t){return this.projectList.find((e=>this.projectNameCoincides(e,t)))}get projectList(){return this._projectList}set projectList(t){this._projectList=t}}class s{constructor(t){this.title=t.title,this.description=t.description,this.dueDate=t.dueDate,this.priority=t.priority}}class a{validateTodoForm=(t,e)=>{const r=this.gatherTodoFormData(t);r.includes("")?console.log("Couldn't create To-do"):this.addTodoToProject(r,e)};createTodo(t){return new s({title:t[0],description:t[1],dueDate:t[2],priority:t[3]})}addTodoToProject(t,e){let r=e.pm,o=e.dco,n=this.createTodo(t),s=o.getCurrentProjectName();r.searchProject(s).addTodo(n),o.loadTodo(o.createTodo(n.title,n.description)),o.removeForm()}gatherTodoFormData=t=>(t.preventDefault(),[document.querySelector("[name='todo-title']").value,document.querySelector("[name='todo-description']").value,document.querySelector("[name='todo-dueDate']").value,document.querySelector("[name='todo-priority']").value])}(new class{constructor(){this.myDCO=new e,this.myELA=new r,this.myPM=new n,this.myTM=new a}loadPage(){this.myDCO.loadPage(),this.myELA.addNavbarListener(this.getNavBarArguments()),this.myELA.addProjectsListListener({dco:this.myDCO,pm:this.myPM})}getNavBarArguments(){return{dco:this.myDCO,pm:this.myPM,validateFunctions:this.getValidateFunctions()}}getValidateFunctions(){return[this.myTM.validateTodoForm,this.myPM.validateProjectForm]}}).loadPage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,